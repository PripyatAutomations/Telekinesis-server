user www-data;
worker_processes auto;
pid /opt/netrig/run/nginx.pid;
error_log /opt/netrig/logs/www.error.log;
load_module modules/ndk_http_module.so;
load_module modules/ngx_http_fancyindex_module.so;
load_module modules/ngx_http_geoip2_module.so;
load_module modules/ngx_http_image_filter_module.so;
load_module modules/ngx_http_lua_module.so;
load_module modules/ngx_http_perl_module.so;
load_module modules/ngx_http_uploadprogress_module.so;
load_module modules/ngx_stream_module.so;

events {
   worker_connections 100;
   multi_accept on;
}

http {
   sendfile on;
   tcp_nopush on;
   types_hash_max_size 2048;
   server_tokens off;
   server_names_hash_bucket_size 64;
   server_name_in_redirect off;

   client_body_temp_path /opt/netrig/tmp/nginx/body/ 1 2;
   proxy_temp_path /opt/netrig/tmp/nginx/proxy/ 1 2;
   fastcgi_temp_path /opt/netrig/tmp/nginx/fcgi/ 1 2;
   uwsgi_temp_path /opt/netrig/tmp/nginx/uwsi/ 1 2;
   scgi_temp_path /opt/netrig/tmp/nginx/scgi/ 1 2;
   include /opt/netrig/etc/nginx/mime.types;
   default_type application/octet-stream;

   ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE
   ssl_prefer_server_ciphers on;

   access_log /opt/netrig/logs/www.access.log;
   gzip on;


   map $http_upgrade $connection_upgrade{
      default upgrade;
      `` close;
   }

   server {
      listen 8000 default_server;
      root /opt/netrig/www;
      index index.html;
      server_name _;

      location / {
         try_files $uri $uri/ =404;
      }

      location /cgi-bin/ {
         root /opt/netrig/cgi-bin;
         rewrite ^/cgi-bin/(.*) /$1 break;
         gzip off;
#         fastcgi_pass unix:/run/fcgiwrap.socket;
	 fastcgi_pass  127.0.0.1:8999;
         # regex to split $uri to $fastcgi_script_name and $fastcgi_path
         fastcgi_split_path_info ^(.+?\.pl)(/.*)$;

         # Check that the PHP script exists before passing it
         try_files $fastcgi_script_name =404;

         # Bypass the fact that try_files resets $fastcgi_path_info
         # see: http://trac.nginx.org/nginx/ticket/321
         set $path_info $fastcgi_path_info;
         fastcgi_param PATH_INFO $path_info;

         fastcgi_index index.php;
         include /opt/netrig/etc/nginx/fastcgi.conf;
         include /opt/netrig/etc/nginx/fastcgi_params;
         fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
      }

      # proxy websocket to rigctl
      location /rigctl/ws {
         proxy_pass http://127.0.0.1:18001/ws;
         proxy_http_version 1.1;
         proxy_set_header Upgrade $http_upgrade;
         proxy_set_header Connection "Upgrade";
         set_real_ip_from 127.0.0.0/24;
         set_real_ip_from 10.0.0.0/8;
#         real_ip_header    X-Forwarded-For;
         real_ip_recursive on;
	 real_ip_header proxy_protocol;
	 proxy_set_header X-Real-IP $proxy_protocol_addr;
	 proxy_set_header X-Forwarded-For $proxy_protocol_addr;
      }

      # proxy to asterisk
      location /pbx/ws {
      	 proxy_pass http://127.0.0.1:8088/pbx/ws;
         proxy_http_version 1.1;
         proxy_set_header Upgrade $http_upgrade;
         proxy_set_header Connection "Upgrade";
	 set_real_ip_from 127.0.0.0/24;
         set_real_ip_from 10.0.0.0/8;
#         real_ip_header    X-Forwarded-For;
         real_ip_recursive on;
	 real_ip_header proxy_protocol;
	 proxy_set_header X-Real-IP $proxy_protocol_addr;
	 proxy_set_header X-Forwarded-For $proxy_protocol_addr;
      }
   }

   server {
      listen	8443 ssl;
      server_name _;
      ssl_certificate /opt/netrig/etc/ssl/fullchain.pem;
      ssl_certificate_key /opt/netrig/etc/ssl/privkey.pem;
      ssl_protocols TLSv1.3;
      ssl_ciphers HIGH:!aNLL:!MD5;

      root /opt/netrig/www;
      index index.html;
      server_name _;

      location / {
         try_files $uri $uri/ =404;
      }

      location /cgi-bin/ {
         root /opt/netrig/cgi-bin;
         rewrite ^/cgi-bin/(.*) /$1 break;
         gzip off;
#         fastcgi_pass unix:/run/fcgiwrap.socket;
	 fastcgi_pass  127.0.0.1:8999;
         # regex to split $uri to $fastcgi_script_name and $fastcgi_path
         fastcgi_split_path_info ^(.+?\.pl)(/.*)$;

         # Check that the PHP script exists before passing it
         try_files $fastcgi_script_name =404;

         # Bypass the fact that try_files resets $fastcgi_path_info
         # see: http://trac.nginx.org/nginx/ticket/321
         set $path_info $fastcgi_path_info;
         fastcgi_param PATH_INFO $path_info;

         fastcgi_index index.php;
         include /opt/netrig/etc/nginx/fastcgi.conf;
         include /opt/netrig/etc/nginx/fastcgi_params;
         fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
      }

      # proxy websocket to rigctl
      location /rigctl/ws {
         proxy_pass http://127.0.0.1:18001/ws;
         proxy_http_version 1.1;
         proxy_set_header Upgrade $http_upgrade;
         proxy_set_header Connection "Upgrade";
         set_real_ip_from 127.0.0.0/24;
         set_real_ip_from 10.0.0.0/8;
#         real_ip_header    X-Forwarded-For;
         real_ip_recursive on;
	 real_ip_header proxy_protocol;
	 proxy_set_header X-Real-IP $proxy_protocol_addr;
	 proxy_set_header X-Forwarded-For $proxy_protocol_addr;
      }

      # proxy to asterisk
      location /pbx/ws {
      	 proxy_pass http://127.0.0.1:8088/pbx/ws;
         proxy_http_version 1.1;
         proxy_set_header Upgrade $http_upgrade;
         proxy_set_header Connection "Upgrade";
         set_real_ip_from 127.0.0.0/24;
         set_real_ip_from 10.0.0.0/8;
#         real_ip_header    X-Forwarded-For;
         real_ip_recursive on;
	 real_ip_header proxy_protocol;
	 proxy_set_header X-Real-IP $proxy_protocol_addr;
	 proxy_set_header X-Forwarded-For $proxy_protocol_addr;
      }
   }
}
